@page
@model Final_Project.Pages.Tools.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Tool[0].ToolName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tool[0].ToolClub)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tool[0].InService)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Tool) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ToolName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ToolClub)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InService)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.ToolId">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.ToolId">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.ToolId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
<hr/>
@{
    // If we are on page 1, prevDisabled will be set to the "disabled" class
    // otherwise, it will be empty. So our previous button will be enabled or disabled based on this logic
    var prevDisabled = "";
    var nexDisabled = "";

   // Calculate the total number of items on the current page
    var totalToolsOnPage = Model.PageSize * (Model.PageNum - 1) + Model.Tool.Count;

    // Check if there are more items in the database for the next page
    if (totalToolsOnPage >= Model.TotalToolsCount)
    {
        nexDisabled = "disabled";
    }

    if (Model.PageNum <= 1)
    {
        prevDisabled = "disabled";
    }
}

<nav aria-label="Page navigation example">
    <ul class="pagination">
        <!-- FIXME: These buttons will forget your current sort order! -->
        <li class="page-item @prevDisabled"><a class="page-link" asp-page="./Index" asp-route-PageNum="@(Model.PageNum - 1)">Previous</a></li>
        <li class="page-item @nexDisabled"><a class="page-link" asp-page="./Index" asp-route-PageNum="@(Model.PageNum + 1)">Next</a></li>
    </ul>
</nav>
